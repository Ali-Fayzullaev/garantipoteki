'use client'

import React, { useState, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { 
  CheckCircle2, 
  CalendarDays, 
  HelpCircle, 
  Clock, 
  Zap, 
  Star, 
  TrendingUp,
  Shield,
  ArrowRight,
  Phone,
  FileText,
  CreditCard,
  UserCheck
} from 'lucide-react'
import { useApp } from '@/components/providers/AppProvider'
import { dict } from '@/lib/dictionary'

export default function QuizSection() {
  const { lang } = useApp()
  const t = dict[lang]
  
  const [step, setStep] = useState(1)
  const [answers, setAnswers] = useState<{ [key: string]: string }>({})
  const [quizDone, setQuizDone] = useState(false)
  const [phoneNumber, setPhoneNumber] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)

  const totalSteps = 4
  const progress = (Math.min(step - 1, totalSteps) / totalSteps) * 100

  const questions = [
    {
      id: 1,
      question: "–ö–∞–∫–∞—è —Å—É–º–º–∞ –≤–∞–º –Ω—É–∂–Ω–∞?",
      icon: CreditCard,
      options: [
        { value: 'a', label: '–î–æ 5 –º–ª–Ω ‚Ç∏', emoji: 'üí∞', description: '–ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞' },
        { value: 'b', label: '5-10 –º–ª–Ω ‚Ç∏', emoji: 'üíµ', description: '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞' },
        { value: 'c', label: '10-15 –º–ª–Ω ‚Ç∏', emoji: 'üíé', description: '–ö—Ä—É–ø–Ω–∞—è —Å—É–º–º–∞' },
        { value: 'd', label: '–ë–æ–ª–µ–µ 15 –º–ª–Ω ‚Ç∏', emoji: 'üè¶', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞' },
      ],
      hint: "83% –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ, —á–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏"
    },
    {
      id: 2,
      question: "–£ –≤–∞—Å –µ—Å—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?",
      icon: UserCheck,
      options: [
        { value: 'a', label: '–î–∞, —Ä–∞–±–æ—Ç–∞—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ', emoji: '‚úÖ', description: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥' },
        { value: 'b', label: '–ù–µ—Ç, –Ω–æ –µ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥', emoji: 'üìä', description: '–ù–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥' },
        { value: 'c', label: '–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—é', emoji: '‚è∏Ô∏è', description: '–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã' },
      ],
      hint: "–î–∞–∂–µ –±–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ 5 –º–ª–Ω —Ç–µ–Ω–≥–µ"
    },
    {
      id: 3,
      question: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤",
      icon: FileText,
      options: [
        { value: 'a', label: '–ï—Å—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –≤—Å–µ 6 –º–µ—Å—è—Ü–µ–≤', emoji: 'üìà', description: '–ò–¥–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è' },
        { value: 'b', label: '–ï—Å—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è, –Ω–æ –Ω–µ –∑–∞ –≤—Å–µ –º–µ—Å—è—Ü—ã', emoji: 'üìâ', description: '–ù–µ–ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è' },
        { value: 'c', label: '–ù–µ—Ç –æ—Ç—á–∏—Å–ª–µ–Ω–∏–π', emoji: '‚ùì', description: '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏' },
      ],
      hint: "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è?"
    },
    {
      id: 4,
      question: "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞—Ö",
      icon: Shield,
      options: [
        { value: 'a', label: '–ù–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤', emoji: 'üÜì', description: '–ß–∏—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è' },
        { value: 'b', label: '–ï—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã, –ø–ª–∞—á—É –≤–æ–≤—Ä–µ–º—è', emoji: '‚è∞', description: '–•–æ—Ä–æ—à–∞—è –∏—Å—Ç–æ—Ä–∏—è' },
        { value: 'c', label: '–ï—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –º–∏–∫—Ä–æ–∑–∞–π–º—ã', emoji: '‚ö°', description: '–†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ' },
        { value: 'd', label: '–ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º', emoji: '‚ö†Ô∏è', description: '–ü—Ä–æ–±–ª–µ–º–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è' },
      ],
      hint: "–ù–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –≤–Ω–æ—Å—è—Ç—Å—è –≤–æ–≤—Ä–µ–º—è"
    }
  ]

  const pick = (key: string, value: string) => {
    setAnswers(prev => ({ ...prev, [key]: value }))
    if (step < totalSteps) {
      setStep(step + 1)
    } else {
      setQuizDone(true)
    }
  }

  const score = useMemo(() => {
    let s = 0
    // Scoring logic based on answers
    if (answers.amount === 'd') s += 2
    if (answers.amount === 'c') s += 3
    if (answers.amount === 'b') s += 4
    if (answers.amount === 'a') s += 5

    if (answers.job === 'a') s += 5
    else if (answers.job === 'b') s += 3
    else s += 1

    if (answers.pension === 'a') s += 5
    else if (answers.pension === 'b') s += 3

    if (answers.debt === 'a') s += 5
    else if (answers.debt === 'b') s += 4
    else if (answers.debt === 'c') s += 2
    else s += 0

    return s
  }, [answers])

  const isTop20 = score >= 15

  const handlePhoneSubmit = async () => {
    if (!phoneNumber) return
    setIsSubmitting(true)
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000))
    setIsSubmitting(false)
    setPhoneNumber('')
    alert('–°–ø–∞—Å–∏–±–æ! –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –ª—É—á—à–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.')
  }

  const formatPhone = (value: string) => {
    const numbers = value.replace(/\D/g, '')
    if (numbers.length <= 1) return `+7${numbers}`
    if (numbers.length <= 4) return `+7 (${numbers.slice(1, 4)}`
    if (numbers.length <= 7) return `+7 (${numbers.slice(1, 4)}) ${numbers.slice(4, 7)}`
    if (numbers.length <= 9) return `+7 (${numbers.slice(1, 4)}) ${numbers.slice(4, 7)}-${numbers.slice(7, 9)}`
    return `+7 (${numbers.slice(1, 4)}) ${numbers.slice(4, 7)}-${numbers.slice(7, 9)}-${numbers.slice(9, 11)}`
  }

  const getPersonalizedRecommendations = () => {
    const recommendations = []
    
    if (answers.job === 'c') {
      recommendations.push('–ù–∞–π–¥–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ—Ö–æ–¥')
    }
    
    if (answers.pension === 'b' || answers.pension === 'c') {
      recommendations.push('–ù–∞—Ä–∞—Å—Ç–∏—Ç–µ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –º–µ—Å—è—Ü–µ–≤')
    }
    
    if (answers.debt === 'c' || answers.debt === 'd') {
      recommendations.push('–ü–æ–≥–∞—Å–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –º–∏–∫—Ä–æ–∑–∞–π–º—ã –∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –∑–∞—è–≤–∫–∏')
    }
    
    if (answers.amount === 'd' && score < 15) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω—å—à–µ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–∏—è')
    }
    
    return recommendations.length > 0 ? recommendations : [
      '–£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–∞ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥/–≤—ã–ø–∏—Å–∫–∏)',
      '–ü–æ–≥–∞—Å–∏—Ç–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ DTI < 45%',
      '–ù–∞—Ä–∞—Å—Ç–∏—Ç–µ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è 2‚Äì3 –º–µ—Å—è—Ü–∞'
    ]
  }

  const scrollToBooking = () => {
    document.getElementById('booking')?.scrollIntoView({ behavior: 'smooth' })
  }

  // Get current question data
  const currentQuestion = questions[step - 1]
  const CurrentIcon = currentQuestion?.icon

  return (
    <section id="quiz" className="py-20 bg-gradient-to-b from-white to-neutral-50 dark:from-neutral-950 dark:to-neutral-900 relative overflow-hidden">
      {/* Background Elements */}
      <div className="absolute top-0 left-0 w-72 h-72 bg-blue-500/5 rounded-full blur-3xl" />
      <div className="absolute bottom-0 right-0 w-96 h-96 bg-orange-500/5 rounded-full blur-3xl" />
      
      <div className="relative mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <Badge className="bg-gradient-to-r from-blue-500/10 to-orange-500/10 text-blue-600 dark:text-blue-400 border-blue-200/50 dark:border-blue-700/50 px-4 py-3 mb-4 backdrop-blur-sm">
            <Zap className="w-4 h-4 mr-2" />
            –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–≤–∏–∑
          </Badge>
          <h2 className="text-4xl md:text-5xl font-bold text-neutral-900 dark:text-white mb-4">
            –£–∑–Ω–∞–π—Ç–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
          </h2>
          <p className="text-xl text-neutral-600 dark:text-neutral-400 max-w-2xl mx-auto">
            –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–∞—à–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
          </p>
        </motion.div>

        {/* Quiz Card */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8 }}
        >
          <Card className="border-0 shadow-2xl bg-white/80 dark:bg-neutral-800/80 backdrop-blur-sm overflow-hidden">
            <CardContent className="p-8">
              {/* Progress Section */}
              <div className="space-y-6 mb-8">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-orange-500 rounded-full flex items-center justify-center">
                      <Clock className="h-5 w-5 text-white" />
                    </div>
                    <div>
                      <div className="font-semibold text-neutral-900 dark:text-white">
                        –í–æ–ø—Ä–æ—Å {step} –∏–∑ {totalSteps}
                      </div>
                      <div className="text-sm text-neutral-500">
                        {Math.round(progress)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                      </div>
                    </div>
                  </div>
                  <Badge variant="secondary" className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300">
                    <Clock className="h-3 w-3 mr-1" />
                    60 —Å–µ–∫
                  </Badge>
                </div>
                <Progress 
                  value={quizDone ? 100 : progress} 
                  className="h-2 bg-neutral-200 dark:bg-neutral-700"
                />
              </div>

              <AnimatePresence mode="wait">
                {!quizDone ? (
                  <motion.div
                    key={step}
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: -20 }}
                    transition={{ duration: 0.4 }}
                    className="space-y-8"
                  >
                    {/* Question */}
                    <div className="text-center space-y-4">
                      {CurrentIcon && (
                        <div className="w-16 h-16 mx-auto bg-gradient-to-br from-blue-500/10 to-orange-500/10 rounded-2xl flex items-center justify-center">
                          <CurrentIcon className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                        </div>
                      )}
                      <h3 className="text-2xl md:text-3xl font-bold text-neutral-900 dark:text-white">
                        {currentQuestion?.question}
                      </h3>
                    </div>

                    {/* Options */}
                    <div className="grid gap-4">
                      {currentQuestion?.options.map((option, index) => (
                        <motion.div
                          key={option.value}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.3, delay: index * 0.1 }}
                        >
                          <Button
                            variant="outline"
                            className="w-full h-auto py-6 px-6 text-left border-2 border-neutral-200 dark:border-neutral-700 hover:border-blue-500 hover:bg-blue-50/50 dark:hover:bg-blue-950/20 group transition-all duration-300"
                            onClick={() => pick(
                              step === 1 ? 'amount' :
                              step === 2 ? 'job' :
                              step === 3 ? 'pension' : 'debt',
                              option.value
                            )}
                          >
                            <div className="flex items-center gap-4 w-full">
                              <div className="text-2xl">{option.emoji}</div>
                              <div className="flex-1 text-left">
                                <div className="font-semibold text-neutral-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                                  {option.label}
                                </div>
                                <div className="text-sm text-neutral-500 dark:text-neutral-400 mt-1">
                                  {option.description}
                                </div>
                              </div>
                              <ArrowRight className="h-5 w-5 text-neutral-400 group-hover:text-blue-500 transition-colors" />
                            </div>
                          </Button>
                        </motion.div>
                      ))}
                    </div>

                    {/* Hint */}
                    {currentQuestion?.hint && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ duration: 0.5, delay: 0.5 }}
                        className="text-center"
                      >
                        {step === 3 ? (
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button variant="ghost" className="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300">
                                <HelpCircle className="h-4 w-4 mr-2" />
                                {currentQuestion.hint}
                              </Button>
                            </DialogTrigger>
                            <DialogContent>
                              <DialogHeader>
                                <DialogTitle>–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è?</DialogTitle>
                                <DialogDescription>
                                  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ eGov
                                </DialogDescription>
                              </DialogHeader>
                              <div className="space-y-4 text-sm">
                                <div className="flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold">1</div>
                                  <span>–ó–∞–π–¥–∏—Ç–µ –Ω–∞ –ø–æ—Ä—Ç–∞–ª eGov</span>
                                </div>
                                <div className="flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold">2</div>
                                  <span>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏¬ª</span>
                                </div>
                                <div className="flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold">3</div>
                                  <span>–í—ã–±–µ—Ä–∏—Ç–µ ¬´–ü–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è¬ª</span>
                                </div>
                                <div className="flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold">4</div>
                                  <span>–°–∫–∞—á–∞–π—Ç–µ –≤—ã–ø–∏—Å–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤</span>
                                </div>
                              </div>
                            </DialogContent>
                          </Dialog>
                        ) : (
                          <p className="text-sm text-neutral-500 dark:text-neutral-400 flex items-center justify-center gap-2">
                            <TrendingUp className="h-4 w-4 text-green-500" />
                            {currentQuestion.hint}
                          </p>
                        )}
                      </motion.div>
                    )}
                  </motion.div>
                ) : (
                  <motion.div
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.5 }}
                    className="text-center space-y-8"
                  >
                    {isTop20 ? (
                      /* SUCCESS RESULT */
                      <>
                        <div className="space-y-6">
                          <div className="w-24 h-24 mx-auto bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center shadow-2xl shadow-green-500/25">
                            <CheckCircle2 className="h-12 w-12 text-white" />
                          </div>
                          
                          <div className="space-y-4">
                            <h3 className="text-3xl md:text-4xl font-bold text-green-600 dark:text-green-400">
                              –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ
                            </h3>
                            <p className="text-xl text-neutral-600 dark:text-neutral-400">
                              –í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –¢–û–ü-20% –∑–∞–µ–º—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
                            </p>
                            <p className="text-lg text-neutral-700 dark:text-neutral-300 font-semibold">
                              –ù–∞—à —ç–∫—Å–ø–µ—Ä—Ç –≥–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ{' '}
                              <span className="text-2xl text-green-600 dark:text-green-400">
                                {answers.amount === 'a' ? '7' : 
                                 answers.amount === 'b' ? '15' : 
                                 answers.amount === 'c' ? '25' : '30'} –º–ª–Ω ‚Ç∏
                              </span>{' '}
                              —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
                            </p>
                          </div>
                        </div>

                        <div className="space-y-6">
                          <Button 
                            onClick={scrollToBooking}
                            size="lg" 
                            className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white px-8 py-4 text-lg font-semibold shadow-2xl shadow-green-500/25 hover:shadow-green-500/40 transition-all duration-300 hover:scale-105"
                          >
                            <CalendarDays className="mr-2 h-5 w-5" />
                            –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ –æ—Ñ–∏—Å–µ
                          </Button>
                          
                          <div className="p-4 rounded-2xl bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-900/20 dark:to-amber-900/20 border border-yellow-200 dark:border-yellow-700">
                            <div className="flex items-center gap-3">
                              <Zap className="h-5 w-5 text-yellow-600 dark:text-yellow-400" />
                              <div>
                                <div className="font-semibold text-yellow-800 dark:text-yellow-300">
                                  ‚ö° –ë–æ–Ω—É—Å –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
                                </div>
                                <div className="text-yellow-700 dark:text-yellow-400 text-sm">
                                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </>
                    ) : (
                      /* IMPROVEMENT NEEDED RESULT */
                      <>
                        <div className="space-y-6">
                          <div className="w-24 h-24 mx-auto bg-gradient-to-br from-amber-500 to-orange-600 rounded-full flex items-center justify-center shadow-2xl shadow-amber-500/25">
                            <HelpCircle className="h-12 w-12 text-white" />
                          </div>
                          
                          <div className="space-y-4">
                            <h3 className="text-3xl md:text-4xl font-bold text-amber-600 dark:text-amber-400">
                              –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!
                            </h3>
                            <p className="text-xl text-neutral-600 dark:text-neutral-400">
                              –°–µ–π—á–∞—Å –Ω–µ —Å–∞–º–æ–µ —É–¥–∞—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏. –ù–æ –º—ã –∑–Ω–∞–µ–º, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –≤–∞—à–∏ —à–∞–Ω—Å—ã
                            </p>
                          </div>
                        </div>

                        <div className="space-y-6">
                          <div className="text-left space-y-4 bg-white/50 dark:bg-neutral-800/50 rounded-2xl p-6">
                            <h4 className="font-semibold text-neutral-900 dark:text-white text-lg flex items-center gap-2">
                              <Star className="h-5 w-5 text-blue-500" />
                              –í–æ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
                            </h4>
                            <ul className="space-y-3">
                              {getPersonalizedRecommendations().map((recommendation, index) => (
                                <motion.li
                                  key={index}
                                  initial={{ opacity: 0, x: -10 }}
                                  animate={{ opacity: 1, x: 0 }}
                                  transition={{ duration: 0.3, delay: index * 0.1 }}
                                  className="flex items-start gap-3 text-neutral-700 dark:text-neutral-300"
                                >
                                  <CheckCircle2 className="h-5 w-5 text-green-500 flex-shrink-0 mt-0.5" />
                                  <span>{recommendation}</span>
                                </motion.li>
                              ))}
                            </ul>
                          </div>

                          <div className="space-y-4">
                            <div className="text-center">
                              <p className="text-neutral-600 dark:text-neutral-400 mb-4">
                                –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –∏ –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –ª—É—á—à–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:
                              </p>
                              <div className="flex gap-3 max-w-md mx-auto">
                                <Input
                                  placeholder="+7 (___) ___-__-__"
                                  value={phoneNumber}
                                  onChange={(e) => setPhoneNumber(formatPhone(e.target.value))}
                                  className="flex-1"
                                />
                                <Button 
                                  onClick={handlePhoneSubmit}
                                  disabled={isSubmitting || !phoneNumber}
                                  className="bg-blue-600 hover:bg-blue-700 text-white"
                                >
                                  {isSubmitting ? (
                                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                                  ) : (
                                    <Phone className="h-4 w-4" />
                                  )}
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </>
                    )}
                  </motion.div>
                )}
              </AnimatePresence>
            </CardContent>
          </Card>
        </motion.div>

        {/* Trust Badges */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="grid grid-cols-2 md:grid-cols-4 gap-6 mt-12"
        >
          {[
            { icon: Shield, text: '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ', color: 'text-blue-500' },
            { icon: Clock, text: '60 —Å–µ–∫—É–Ω–¥', color: 'text-green-500' },
            { icon: CheckCircle2, text: '–ë–µ–∑ —Å–ø–∞–º–∞', color: 'text-emerald-500' },
            { icon: Star, text: '–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç', color: 'text-amber-500' },
          ].map((item, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, scale: 0.9 }}
              whileInView={{ opacity: 1, scale: 1 }}
              viewport={{ once: true }}
              transition={{ duration: 0.4, delay: index * 0.1 }}
              className="flex items-center gap-3 justify-center p-4 rounded-2xl bg-white/50 dark:bg-neutral-800/50 backdrop-blur-sm border border-neutral-200/50 dark:border-neutral-700/50"
            >
              <item.icon className={`h-5 w-5 ${item.color}`} />
              <span className="text-sm font-medium text-neutral-700 dark:text-neutral-300">
                {item.text}
              </span>
            </motion.div>
          ))}
        </motion.div>
      </div>
    </section>
  )
}